use utoipa::{Modify, OpenApi};
use utoipa::openapi::security::{HttpAuthScheme, HttpBuilder, SecurityScheme};

#[derive(OpenApi)]
#[openapi(
    paths(
        crate::endpoints::app_tokens::generate,
        crate::endpoints::app_tokens::index,
        crate::endpoints::app_tokens::revoke,
        crate::endpoints::configuration::images,
        crate::endpoints::genres::create,
        crate::endpoints::genres::delete,
        crate::endpoints::genres::index,
        crate::endpoints::logs::create,
        crate::endpoints::logs::details,
        crate::endpoints::logs::update,
        crate::endpoints::logs::delete,
        crate::endpoints::logset::create,
        crate::endpoints::media::index,
        crate::endpoints::media::search,
        crate::endpoints::movies::create,
        crate::endpoints::movies::create_w_source,
        crate::endpoints::movies::index,
        crate::endpoints::movies::search,
        crate::endpoints::movies::genres,
        crate::endpoints::movies::details,
        crate::endpoints::movies::metadata,
        crate::endpoints::movies::on_watchlist,
        crate::endpoints::movies::update,
        crate::endpoints::movies::images,
        crate::endpoints::movies::update_images,
        crate::endpoints::movies::delete,
        crate::endpoints::movies::delete_w_source,
        crate::endpoints::media::index,
        crate::endpoints::media::search,
        crate::endpoints::series::create,
        crate::endpoints::series::create_w_source,
        crate::endpoints::series::index,
        crate::endpoints::series::search,
        crate::endpoints::series::genres,
        crate::endpoints::series::details,
        crate::endpoints::series::metadata,
        crate::endpoints::series::on_watchlist,
        crate::endpoints::series::update,
        crate::endpoints::series::images,
        crate::endpoints::series::update_images,
        crate::endpoints::series::delete,
        crate::endpoints::series::delete_w_source,
        crate::endpoints::sources::create,
        crate::endpoints::sources::index,
        crate::endpoints::sources::details,
        crate::endpoints::sources::update,
        crate::endpoints::sources::delete,
        crate::endpoints::statistics::stats,
        crate::endpoints::tags::create,
        crate::endpoints::tags::delete,
        crate::endpoints::titles::create,
        crate::endpoints::titles::set_primary,
        crate::endpoints::titles::delete,
        crate::endpoints::users::register,
        crate::endpoints::users::login,
        crate::endpoints::users::profile,
        crate::endpoints::users::index,
        crate::endpoints::users::change_password,
        crate::endpoints::users::delete,
        crate::endpoints::watchlist::add,
        crate::endpoints::watchlist::index,
        crate::endpoints::watchlist::search,
        crate::endpoints::watchlist::remove,
        crate::endpoints::ping::ping,
        crate::endpoints::masterdata::refresh,
    ),
    components(
        schemas(
            views::api::RouteType,
            views::api::ApiErrView,
            views::app_tokens::AppToken,
            views::app_tokens::AppTokenGenerate,
            views::app_tokens::AppTokenIndex,
            views::configuration::ImagesConfiguration,
            views::genres::GenreCreate,
            views::languages::LanguageIndex,
            views::logs::LogCreate,
            views::logs::Log,
            views::logs::LogUpdate,
            views::logset::LogsetCreate,
            views::media::MediaIndex,
            views::media::ExternalIndex,
            views::media::SearchResults,
            views::media::SearchQuery,
            views::media::SortTarget,
            views::media::MediaType,
            views::images::Images,
            views::images::Image,
            views::images::ImagesUpdate,
            views::languages::LanguageIndex,
            views::languages::LanguageIndex,
            views::media::MediaSourceCreate,
            views::media::MediaSourceDelete,
            views::movies::MovieDetails,
            views::movies::MovieMetadata,
            views::titles::AlternativeTitle,
            views::languages::Language,
            views::genres::Genre,
            views::tags::Tag,
            views::sources::Source,
            views::sources::SourceType,
            views::series::SeriesDetails,
            views::series::SeriesMetadata,
            views::sources::SourceCreate,
            views::sources::SourceUpdate,
            views::statistics::Stats,
            views::statistics::MediaStats,
            views::statistics::LogStats,
            views::statistics::CategoryStats,
            views::statistics::ComparativeStats,
            views::statistics::AvgRatingStats,
            views::tags::TagCreate,
            views::titles::TitleCreate,
            views::users::PasswordChange,
            views::users::UserIndex,
            views::users::UserLogin,
            views::users::UserProfile,
            views::users::UserRegistration,
            views::users::UserToken,
            views::watchlist::WatchlistParams,
        )
    ),
    info(
        title = "Mia",
        description = "Movie and TV show tracker",
        license(name = "AGPL", url = "https://www.gnu.org/licenses/agpl-3.0.en.html"),
        version = "0.1.0"
    ),
    modifiers(&SecurityAddon)
)]
pub struct ApiDoc;

struct SecurityAddon;

impl Modify for SecurityAddon {
    fn modify(&self, openapi: &mut utoipa::openapi::OpenApi) {
        if let Some(components) = openapi.components.as_mut() {
            components.add_security_scheme(
                "api_key",
                SecurityScheme::Http(
                    HttpBuilder::new().scheme(HttpAuthScheme::Bearer).bearer_format("JWT").build()
                )
            )
        }
    }
}